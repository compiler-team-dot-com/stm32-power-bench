ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f3xx_hal_msp.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_RTC_MspInit,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_RTC_MspInit
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	HAL_RTC_MspInit:
  27              	.LVL0:
  28              	.LFB130:
  29              		.file 1 "Src/stm32f3xx_hal_msp.c"
   1:Src/stm32f3xx_hal_msp.c **** /**
   2:Src/stm32f3xx_hal_msp.c ****   ******************************************************************************
   3:Src/stm32f3xx_hal_msp.c ****   * @file    PWR/PWR_CurrentConsumption/Src/stm32f3xx_hal_msp.c
   4:Src/stm32f3xx_hal_msp.c ****   * @author  MCD Application Team
   5:Src/stm32f3xx_hal_msp.c ****   * @brief   HAL MSP module.
   6:Src/stm32f3xx_hal_msp.c ****   ******************************************************************************
   7:Src/stm32f3xx_hal_msp.c ****   * @attention
   8:Src/stm32f3xx_hal_msp.c ****   *
   9:Src/stm32f3xx_hal_msp.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  10:Src/stm32f3xx_hal_msp.c ****   * All rights reserved.</center></h2>
  11:Src/stm32f3xx_hal_msp.c ****   *
  12:Src/stm32f3xx_hal_msp.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/stm32f3xx_hal_msp.c ****   * the "License"; You may not use this file except in compliance with the
  14:Src/stm32f3xx_hal_msp.c ****   * License. You may obtain a copy of the License at:
  15:Src/stm32f3xx_hal_msp.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/stm32f3xx_hal_msp.c ****   *
  17:Src/stm32f3xx_hal_msp.c ****   ******************************************************************************
  18:Src/stm32f3xx_hal_msp.c ****   */
  19:Src/stm32f3xx_hal_msp.c **** 
  20:Src/stm32f3xx_hal_msp.c **** /* Includes ------------------------------------------------------------------*/
  21:Src/stm32f3xx_hal_msp.c **** #include "main.h"
  22:Src/stm32f3xx_hal_msp.c **** 
  23:Src/stm32f3xx_hal_msp.c **** /** @addtogroup STM32F3xx_HAL_Examples
  24:Src/stm32f3xx_hal_msp.c ****   * @{
  25:Src/stm32f3xx_hal_msp.c ****   */
  26:Src/stm32f3xx_hal_msp.c **** 
  27:Src/stm32f3xx_hal_msp.c **** /** @defgroup PWR_CurrentConsumption
  28:Src/stm32f3xx_hal_msp.c ****   * @{
  29:Src/stm32f3xx_hal_msp.c ****   */
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 2


  30:Src/stm32f3xx_hal_msp.c **** 
  31:Src/stm32f3xx_hal_msp.c **** /* Private typedef -----------------------------------------------------------*/
  32:Src/stm32f3xx_hal_msp.c **** /* Private define ------------------------------------------------------------*/
  33:Src/stm32f3xx_hal_msp.c **** /* Private macro -------------------------------------------------------------*/
  34:Src/stm32f3xx_hal_msp.c **** /* Private variables ---------------------------------------------------------*/
  35:Src/stm32f3xx_hal_msp.c **** /* Private function prototypes -----------------------------------------------*/
  36:Src/stm32f3xx_hal_msp.c **** /* Private functions ---------------------------------------------------------*/
  37:Src/stm32f3xx_hal_msp.c **** 
  38:Src/stm32f3xx_hal_msp.c **** /** @defgroup HAL_MSP_Private_Functions
  39:Src/stm32f3xx_hal_msp.c ****   * @{
  40:Src/stm32f3xx_hal_msp.c ****   */
  41:Src/stm32f3xx_hal_msp.c **** 
  42:Src/stm32f3xx_hal_msp.c **** /**
  43:Src/stm32f3xx_hal_msp.c ****   * @brief RTC MSP Initialization
  44:Src/stm32f3xx_hal_msp.c ****   *        This function configures the hardware resources used in this example
  45:Src/stm32f3xx_hal_msp.c ****   * @param hrtc: RTC handle pointer
  46:Src/stm32f3xx_hal_msp.c ****   * 
  47:Src/stm32f3xx_hal_msp.c ****   * @note  Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select 
  48:Src/stm32f3xx_hal_msp.c ****   *        the RTC clock source; in this case the Backup domain will be reset in  
  49:Src/stm32f3xx_hal_msp.c ****   *        order to modify the RTC Clock source, as consequence RTC registers (including 
  50:Src/stm32f3xx_hal_msp.c ****   *        the backup registers) and RCC_BDCR register are set to their reset values.
  51:Src/stm32f3xx_hal_msp.c ****   *             
  52:Src/stm32f3xx_hal_msp.c ****   * @retval None
  53:Src/stm32f3xx_hal_msp.c ****   */
  54:Src/stm32f3xx_hal_msp.c **** void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
  55:Src/stm32f3xx_hal_msp.c **** {
  30              		.loc 1 55 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 104
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		.loc 1 55 1 is_stmt 0 view .LVU1
  35 0000 00B5     		push	{lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 4
  38              		.cfi_offset 14, -4
  39 0002 9BB0     		sub	sp, sp, #108
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 112
  56:Src/stm32f3xx_hal_msp.c ****   RCC_OscInitTypeDef        RCC_OscInitStruct;
  42              		.loc 1 56 3 is_stmt 1 view .LVU2
  57:Src/stm32f3xx_hal_msp.c ****   RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  43              		.loc 1 57 3 view .LVU3
  58:Src/stm32f3xx_hal_msp.c **** 
  59:Src/stm32f3xx_hal_msp.c ****   /*##-1- Configue LSE as RTC clock soucre ###################################*/ 
  60:Src/stm32f3xx_hal_msp.c **** #ifdef RTC_CLOCK_SOURCE_LSE
  61:Src/stm32f3xx_hal_msp.c ****     
  62:Src/stm32f3xx_hal_msp.c ****   RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
  63:Src/stm32f3xx_hal_msp.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  64:Src/stm32f3xx_hal_msp.c ****   RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  65:Src/stm32f3xx_hal_msp.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
  66:Src/stm32f3xx_hal_msp.c ****   if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  67:Src/stm32f3xx_hal_msp.c ****   { 
  68:Src/stm32f3xx_hal_msp.c ****     Error_Handler();
  69:Src/stm32f3xx_hal_msp.c ****   }
  70:Src/stm32f3xx_hal_msp.c **** 
  71:Src/stm32f3xx_hal_msp.c ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  72:Src/stm32f3xx_hal_msp.c ****   PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 3


  73:Src/stm32f3xx_hal_msp.c ****   if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  74:Src/stm32f3xx_hal_msp.c ****   { 
  75:Src/stm32f3xx_hal_msp.c ****     Error_Handler();
  76:Src/stm32f3xx_hal_msp.c ****   }
  77:Src/stm32f3xx_hal_msp.c **** 
  78:Src/stm32f3xx_hal_msp.c **** #elif defined (RTC_CLOCK_SOURCE_LSI)  
  79:Src/stm32f3xx_hal_msp.c ****   RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
  44              		.loc 1 79 3 view .LVU4
  45              		.loc 1 79 36 is_stmt 0 view .LVU5
  46 0004 0C23     		movs	r3, #12
  47 0006 1093     		str	r3, [sp, #64]
  80:Src/stm32f3xx_hal_msp.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  48              		.loc 1 80 3 is_stmt 1 view .LVU6
  49              		.loc 1 80 34 is_stmt 0 view .LVU7
  50 0008 0023     		movs	r3, #0
  51 000a 1793     		str	r3, [sp, #92]
  81:Src/stm32f3xx_hal_msp.c ****   RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  52              		.loc 1 81 3 is_stmt 1 view .LVU8
  53              		.loc 1 81 30 is_stmt 0 view .LVU9
  54 000c 0122     		movs	r2, #1
  55 000e 1692     		str	r2, [sp, #88]
  82:Src/stm32f3xx_hal_msp.c ****   RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
  56              		.loc 1 82 3 is_stmt 1 view .LVU10
  57              		.loc 1 82 30 is_stmt 0 view .LVU11
  58 0010 1393     		str	r3, [sp, #76]
  83:Src/stm32f3xx_hal_msp.c ****   if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  59              		.loc 1 83 3 is_stmt 1 view .LVU12
  60              		.loc 1 83 6 is_stmt 0 view .LVU13
  61 0012 10A8     		add	r0, sp, #64
  62              	.LVL1:
  63              		.loc 1 83 6 view .LVU14
  64 0014 FFF7FEFF 		bl	HAL_RCC_OscConfig
  65              	.LVL2:
  66              		.loc 1 83 5 view .LVU15
  67 0018 F8B9     		cbnz	r0, .L5
  68              	.L2:
  84:Src/stm32f3xx_hal_msp.c ****   {
  85:Src/stm32f3xx_hal_msp.c ****     Error_Handler();
  86:Src/stm32f3xx_hal_msp.c ****   }
  87:Src/stm32f3xx_hal_msp.c **** 
  88:Src/stm32f3xx_hal_msp.c ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  69              		.loc 1 88 3 is_stmt 1 view .LVU16
  70              		.loc 1 88 44 is_stmt 0 view .LVU17
  71 001a 4FF48033 		mov	r3, #65536
  72 001e 0193     		str	r3, [sp, #4]
  89:Src/stm32f3xx_hal_msp.c ****   PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  73              		.loc 1 89 3 is_stmt 1 view .LVU18
  74              		.loc 1 89 41 is_stmt 0 view .LVU19
  75 0020 4FF40073 		mov	r3, #512
  76 0024 0293     		str	r3, [sp, #8]
  90:Src/stm32f3xx_hal_msp.c ****   if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  77              		.loc 1 90 3 is_stmt 1 view .LVU20
  78              		.loc 1 90 6 is_stmt 0 view .LVU21
  79 0026 01A8     		add	r0, sp, #4
  80 0028 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
  81              	.LVL3:
  82              		.loc 1 90 5 view .LVU22
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 4


  83 002c C0B9     		cbnz	r0, .L6
  84              	.L3:
  91:Src/stm32f3xx_hal_msp.c ****   { 
  92:Src/stm32f3xx_hal_msp.c ****     Error_Handler();
  93:Src/stm32f3xx_hal_msp.c ****   }
  94:Src/stm32f3xx_hal_msp.c **** #else
  95:Src/stm32f3xx_hal_msp.c **** #error Please select the RTC Clock source inside the main.h file
  96:Src/stm32f3xx_hal_msp.c **** #endif /*RTC_CLOCK_SOURCE_LSE*/
  97:Src/stm32f3xx_hal_msp.c **** 
  98:Src/stm32f3xx_hal_msp.c ****   /*##-2- Enable the RTC peripheral Clock ####################################*/
  99:Src/stm32f3xx_hal_msp.c ****   /* Enable RTC Clock */
 100:Src/stm32f3xx_hal_msp.c ****   __HAL_RCC_RTC_ENABLE();
  85              		.loc 1 100 3 is_stmt 1 view .LVU23
  86              	.LVL4:
  87              	.LBB6:
  88              	.LBI6:
  89              		.file 2 "STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h"
   1:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 5


  41:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 6


  98:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 7


 155:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 8


 212:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 9


 269:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 10


 326:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 11


 383:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 12


 440:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 13


 497:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 14


 554:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 15


 611:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 16


 668:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 17


 725:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 18


 782:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 19


 839:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 20


 896:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 947:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 21


 953:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
  90              		.loc 2 981 31 view .LVU24
  91              	.LBB7:
 982:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  92              		.loc 2 983 3 view .LVU25
 984:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
  93              		.loc 2 988 4 view .LVU26
  94 002e 4FF40042 		mov	r2, #32768
  95              		.syntax unified
  96              	@ 988 "STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h" 1
  97 0032 92FAA2F2 		rbit r2, r2
  98              	@ 0 "" 2
  99              	.LVL5:
 989:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 990:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 991:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 992:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 993:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 994:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 995:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 996:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 997:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 998:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 999:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 22


1000:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1001:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 100              		.loc 2 1001 3 view .LVU27
 101              		.loc 2 1001 3 is_stmt 0 view .LVU28
 102              		.thumb
 103              		.syntax unified
 104              	.LBE7:
 105              	.LBE6:
 106              		.loc 1 100 3 view .LVU29
 107 0036 B2FA82F2 		clz	r2, r2
 108 003a 0B4B     		ldr	r3, .L7
 109 003c 1344     		add	r3, r3, r2
 110 003e 9B00     		lsls	r3, r3, #2
 111 0040 0122     		movs	r2, #1
 112 0042 1A60     		str	r2, [r3]
 101:Src/stm32f3xx_hal_msp.c **** 
 102:Src/stm32f3xx_hal_msp.c ****   /*##-3- Configure the NVIC for RTC_WKUP_IRQn ###################################*/
 103:Src/stm32f3xx_hal_msp.c ****   HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0x0F, 0);
 113              		.loc 1 103 3 is_stmt 1 view .LVU30
 114 0044 0022     		movs	r2, #0
 115 0046 0F21     		movs	r1, #15
 116 0048 0320     		movs	r0, #3
 117 004a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 118              	.LVL6:
 104:Src/stm32f3xx_hal_msp.c ****   HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 119              		.loc 1 104 3 view .LVU31
 120 004e 0320     		movs	r0, #3
 121 0050 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 122              	.LVL7:
 105:Src/stm32f3xx_hal_msp.c **** }
 123              		.loc 1 105 1 is_stmt 0 view .LVU32
 124 0054 1BB0     		add	sp, sp, #108
 125              	.LCFI2:
 126              		.cfi_remember_state
 127              		.cfi_def_cfa_offset 4
 128              		@ sp needed
 129 0056 5DF804FB 		ldr	pc, [sp], #4
 130              	.L5:
 131              	.LCFI3:
 132              		.cfi_restore_state
  85:Src/stm32f3xx_hal_msp.c ****   }
 133              		.loc 1 85 5 is_stmt 1 view .LVU33
 134 005a FFF7FEFF 		bl	Error_Handler
 135              	.LVL8:
 136 005e DCE7     		b	.L2
 137              	.L6:
  92:Src/stm32f3xx_hal_msp.c ****   }
 138              		.loc 1 92 5 view .LVU34
 139 0060 FFF7FEFF 		bl	Error_Handler
 140              	.LVL9:
 141 0064 E3E7     		b	.L3
 142              	.L8:
 143 0066 00BF     		.align	2
 144              	.L7:
 145 0068 00819010 		.word	277905664
 146              		.cfi_endproc
 147              	.LFE130:
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 23


 149              		.section	.text.HAL_RTC_MspDeInit,"ax",%progbits
 150              		.align	1
 151              		.global	HAL_RTC_MspDeInit
 152              		.syntax unified
 153              		.thumb
 154              		.thumb_func
 155              		.fpu fpv4-sp-d16
 157              	HAL_RTC_MspDeInit:
 158              	.LVL10:
 159              	.LFB131:
 106:Src/stm32f3xx_hal_msp.c **** 
 107:Src/stm32f3xx_hal_msp.c **** /**
 108:Src/stm32f3xx_hal_msp.c ****   * @brief RTC MSP De-Initialization
 109:Src/stm32f3xx_hal_msp.c ****   *        This function freeze the hardware resources used in this example:
 110:Src/stm32f3xx_hal_msp.c ****   *          - Disable the Peripheral's clock
 111:Src/stm32f3xx_hal_msp.c ****   * @param hrtc: RTC handle pointer
 112:Src/stm32f3xx_hal_msp.c ****   * @retval None
 113:Src/stm32f3xx_hal_msp.c ****   */
 114:Src/stm32f3xx_hal_msp.c **** void HAL_RTC_MspDeInit(RTC_HandleTypeDef *hrtc)
 115:Src/stm32f3xx_hal_msp.c **** {
 160              		.loc 1 115 1 view -0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		@ link register save eliminated.
 116:Src/stm32f3xx_hal_msp.c ****   /*##-1- Reset peripherals ##################################################*/
 117:Src/stm32f3xx_hal_msp.c ****   __HAL_RCC_RTC_DISABLE();
 165              		.loc 1 117 3 view .LVU36
 166              	.LBB8:
 167              	.LBI8:
 981:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168              		.loc 2 981 31 view .LVU37
 169              	.LBB9:
 983:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170              		.loc 2 983 3 view .LVU38
 988:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 171              		.loc 2 988 4 view .LVU39
 172 0000 4FF40042 		mov	r2, #32768
 173              		.syntax unified
 174              	@ 988 "STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 175 0004 92FAA2F2 		rbit r2, r2
 176              	@ 0 "" 2
 177              	.LVL11:
 178              		.loc 2 1001 3 view .LVU40
 179              		.loc 2 1001 3 is_stmt 0 view .LVU41
 180              		.thumb
 181              		.syntax unified
 182              	.LBE9:
 183              	.LBE8:
 184              		.loc 1 117 3 view .LVU42
 185 0008 B2FA82F2 		clz	r2, r2
 186 000c 024B     		ldr	r3, .L10
 187 000e 1344     		add	r3, r3, r2
 188 0010 9B00     		lsls	r3, r3, #2
 189 0012 0022     		movs	r2, #0
 190 0014 1A60     		str	r2, [r3]
 118:Src/stm32f3xx_hal_msp.c **** }
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 24


 191              		.loc 1 118 1 view .LVU43
 192 0016 7047     		bx	lr
 193              	.L11:
 194              		.align	2
 195              	.L10:
 196 0018 00819010 		.word	277905664
 197              		.cfi_endproc
 198              	.LFE131:
 200              		.text
 201              	.Letext0:
 202              		.file 3 "/Users/brunoflores/Downloads/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/mac
 203              		.file 4 "/Users/brunoflores/Downloads/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/sys
 204              		.file 5 "STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/core_cm4.h"
 205              		.file 6 "STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 206              		.file 7 "STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
 207              		.file 8 "STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 208              		.file 9 "STM32Cube_FW_F3_V1.11.1/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 209              		.file 10 "STM32Cube_FW_F3_V1.11.1/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 210              		.file 11 "STM32Cube_FW_F3_V1.11.1/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
 211              		.file 12 "STM32Cube_FW_F3_V1.11.1/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rtc.h"
 212              		.file 13 "STM32Cube_FW_F3_V1.11.1/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 213              		.file 14 "STM32Cube_FW_F3_V1.11.1/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
 214              		.file 15 "Inc/main.h"
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f3xx_hal_msp.c
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s:18     .text.HAL_RTC_MspInit:0000000000000000 $t
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s:26     .text.HAL_RTC_MspInit:0000000000000000 HAL_RTC_MspInit
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s:145    .text.HAL_RTC_MspInit:0000000000000068 $d
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s:150    .text.HAL_RTC_MspDeInit:0000000000000000 $t
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s:157    .text.HAL_RTC_MspDeInit:0000000000000000 HAL_RTC_MspDeInit
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//ccDj2I5k.s:196    .text.HAL_RTC_MspDeInit:0000000000000018 $d

UNDEFINED SYMBOLS
HAL_RCC_OscConfig
HAL_RCCEx_PeriphCLKConfig
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
Error_Handler
