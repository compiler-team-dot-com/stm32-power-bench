ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f3xx_lp_modes.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SYSCLKConfig_STOP,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	SYSCLKConfig_STOP:
  26              	.LFB134:
  27              		.file 1 "Src/stm32f3xx_lp_modes.c"
   1:Src/stm32f3xx_lp_modes.c **** /**
   2:Src/stm32f3xx_lp_modes.c ****   ******************************************************************************
   3:Src/stm32f3xx_lp_modes.c ****   * @file    PWR/PWR_CurrentConsumption/stm32f3xx_lp_modes.c
   4:Src/stm32f3xx_lp_modes.c ****   * @author  MCD Application Team
   5:Src/stm32f3xx_lp_modes.c ****   * @brief   This file provides firmware functions to manage the following
   6:Src/stm32f3xx_lp_modes.c ****   *          functionalities of the STM32F3xx Low Power Modes:
   7:Src/stm32f3xx_lp_modes.c ****   *           - Sleep Mode
   8:Src/stm32f3xx_lp_modes.c ****   *           - STOP mode with RTC
   9:Src/stm32f3xx_lp_modes.c ****   *           - STANDBY mode without RTC
  10:Src/stm32f3xx_lp_modes.c ****   *           - STANDBY mode with RTC 
  11:Src/stm32f3xx_lp_modes.c ****   ******************************************************************************
  12:Src/stm32f3xx_lp_modes.c ****   * @attention
  13:Src/stm32f3xx_lp_modes.c ****   *
  14:Src/stm32f3xx_lp_modes.c ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  15:Src/stm32f3xx_lp_modes.c ****   * All rights reserved.</center></h2>
  16:Src/stm32f3xx_lp_modes.c ****   *
  17:Src/stm32f3xx_lp_modes.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  18:Src/stm32f3xx_lp_modes.c ****   * the "License"; You may not use this file except in compliance with the
  19:Src/stm32f3xx_lp_modes.c ****   * License. You may obtain a copy of the License at:
  20:Src/stm32f3xx_lp_modes.c ****   *                        opensource.org/licenses/BSD-3-Clause
  21:Src/stm32f3xx_lp_modes.c ****   *
  22:Src/stm32f3xx_lp_modes.c ****   ******************************************************************************
  23:Src/stm32f3xx_lp_modes.c ****   */
  24:Src/stm32f3xx_lp_modes.c **** 
  25:Src/stm32f3xx_lp_modes.c **** /* Includes ------------------------------------------------------------------*/
  26:Src/stm32f3xx_lp_modes.c **** #include "main.h"
  27:Src/stm32f3xx_lp_modes.c **** 
  28:Src/stm32f3xx_lp_modes.c **** /** @addtogroup STM32F3xx_HAL_Examples
  29:Src/stm32f3xx_lp_modes.c ****   * @{
  30:Src/stm32f3xx_lp_modes.c ****   */
  31:Src/stm32f3xx_lp_modes.c **** 
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 2


  32:Src/stm32f3xx_lp_modes.c **** /** @addtogroup PWR_CurrentConsumption
  33:Src/stm32f3xx_lp_modes.c ****   * @{
  34:Src/stm32f3xx_lp_modes.c ****   */
  35:Src/stm32f3xx_lp_modes.c **** 
  36:Src/stm32f3xx_lp_modes.c **** /* Private typedef -----------------------------------------------------------*/
  37:Src/stm32f3xx_lp_modes.c **** /* Private define ------------------------------------------------------------*/
  38:Src/stm32f3xx_lp_modes.c **** /* Private macro -------------------------------------------------------------*/
  39:Src/stm32f3xx_lp_modes.c **** /* Private variables ---------------------------------------------------------*/
  40:Src/stm32f3xx_lp_modes.c **** /* RTC handler declaration */
  41:Src/stm32f3xx_lp_modes.c **** RTC_HandleTypeDef RTCHandle;
  42:Src/stm32f3xx_lp_modes.c **** 
  43:Src/stm32f3xx_lp_modes.c **** /* Private function prototypes -----------------------------------------------*/
  44:Src/stm32f3xx_lp_modes.c **** static void SYSCLKConfig_STOP(void);
  45:Src/stm32f3xx_lp_modes.c **** 
  46:Src/stm32f3xx_lp_modes.c **** /* Private functions ---------------------------------------------------------*/
  47:Src/stm32f3xx_lp_modes.c **** 
  48:Src/stm32f3xx_lp_modes.c **** /**
  49:Src/stm32f3xx_lp_modes.c ****   * @brief  This function configures the system to enter Sleep mode for
  50:Src/stm32f3xx_lp_modes.c ****   *         current consumption measurement purpose.
  51:Src/stm32f3xx_lp_modes.c ****   *         Sleep Mode
  52:Src/stm32f3xx_lp_modes.c ****   *         ==========
  53:Src/stm32f3xx_lp_modes.c ****   *            - System Running at PLL (72 MHz)
  54:Src/stm32f3xx_lp_modes.c ****   *            - Flash 2 wait state
  55:Src/stm32f3xx_lp_modes.c ****   *            - Prefetch ON
  56:Src/stm32f3xx_lp_modes.c ****   *            - Code running from Internal FLASH
  57:Src/stm32f3xx_lp_modes.c ****   *            - All peripherals disabled.
  58:Src/stm32f3xx_lp_modes.c ****   *            - Wakeup using EXTI Line (User push-button PA.00 pin)
  59:Src/stm32f3xx_lp_modes.c ****   * @param  None
  60:Src/stm32f3xx_lp_modes.c ****   * @retval None
  61:Src/stm32f3xx_lp_modes.c ****   */
  62:Src/stm32f3xx_lp_modes.c **** void SleepMode_Measure(void)
  63:Src/stm32f3xx_lp_modes.c **** {
  64:Src/stm32f3xx_lp_modes.c ****   GPIO_InitTypeDef GPIO_InitStruct;
  65:Src/stm32f3xx_lp_modes.c **** 
  66:Src/stm32f3xx_lp_modes.c ****   /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  67:Src/stm32f3xx_lp_modes.c ****   /* Enable GPIOs clock */
  68:Src/stm32f3xx_lp_modes.c ****   /* Warning : Reconfiguring all GPIO will close the connexion with the debugger */
  69:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  70:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  71:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  72:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  73:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
  74:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  75:Src/stm32f3xx_lp_modes.c **** 
  76:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  77:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  78:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  79:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Pin = GPIO_PIN_All;
  80:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  81:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  82:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  83:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
  84:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
  85:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
  86:Src/stm32f3xx_lp_modes.c **** 
  87:Src/stm32f3xx_lp_modes.c ****   /* Disable GPIOs clock */
  88:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOA_CLK_DISABLE();
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 3


  89:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_DISABLE();
  90:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_DISABLE();
  91:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_DISABLE();
  92:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_DISABLE();
  93:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_DISABLE();
  94:Src/stm32f3xx_lp_modes.c **** 
  95:Src/stm32f3xx_lp_modes.c ****   /* Configure User push-button as external interrupt generator */
  96:Src/stm32f3xx_lp_modes.c ****   BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
  97:Src/stm32f3xx_lp_modes.c **** 
  98:Src/stm32f3xx_lp_modes.c ****   /*Suspend Tick increment to prevent wakeup by Systick interrupt. 
  99:Src/stm32f3xx_lp_modes.c ****     Otherwise the Systick interrupt will wake up the device within 1ms (HAL time base)*/
 100:Src/stm32f3xx_lp_modes.c ****   HAL_SuspendTick();
 101:Src/stm32f3xx_lp_modes.c **** 
 102:Src/stm32f3xx_lp_modes.c ****   /* Request to enter SLEEP mode */
 103:Src/stm32f3xx_lp_modes.c ****   HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 104:Src/stm32f3xx_lp_modes.c **** 
 105:Src/stm32f3xx_lp_modes.c ****   /* Resume Tick interrupt if disabled prior to sleep mode entry*/
 106:Src/stm32f3xx_lp_modes.c ****   HAL_ResumeTick();
 107:Src/stm32f3xx_lp_modes.c **** 
 108:Src/stm32f3xx_lp_modes.c ****   /* Initialize led */
 109:Src/stm32f3xx_lp_modes.c ****   BSP_LED_Init(LED3);
 110:Src/stm32f3xx_lp_modes.c **** }
 111:Src/stm32f3xx_lp_modes.c **** 
 112:Src/stm32f3xx_lp_modes.c **** 
 113:Src/stm32f3xx_lp_modes.c **** 
 114:Src/stm32f3xx_lp_modes.c **** /**
 115:Src/stm32f3xx_lp_modes.c ****   * @brief  This function configures the system to enter Stop mode with RTC
 116:Src/stm32f3xx_lp_modes.c ****   *         clocked by LSE or LSI for current consumption measurement purpose.
 117:Src/stm32f3xx_lp_modes.c ****   *         STOP Mode with RTC clocked by LSE/LSI
 118:Src/stm32f3xx_lp_modes.c ****   *         =====================================
 119:Src/stm32f3xx_lp_modes.c ****   *           - RTC Clocked by LSE or LSI
 120:Src/stm32f3xx_lp_modes.c ****   *           - Regulator in LP mode
 121:Src/stm32f3xx_lp_modes.c ****   *           - HSI, HSE OFF and LSI OFF if not used as RTC Clock source
 122:Src/stm32f3xx_lp_modes.c ****   *           - No IWDG
 123:Src/stm32f3xx_lp_modes.c ****   *           - Automatic Wakeup using RTC clocked by LSE/LSI (~20s)
 124:Src/stm32f3xx_lp_modes.c ****   * @param  None
 125:Src/stm32f3xx_lp_modes.c ****   * @retval None
 126:Src/stm32f3xx_lp_modes.c ****   */
 127:Src/stm32f3xx_lp_modes.c **** void StopRTCMode_Measure(void)
 128:Src/stm32f3xx_lp_modes.c **** {
 129:Src/stm32f3xx_lp_modes.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 130:Src/stm32f3xx_lp_modes.c **** 
 131:Src/stm32f3xx_lp_modes.c ****   /* Configure all GPIO as analog to reduce current consumption on non used IOs */
 132:Src/stm32f3xx_lp_modes.c ****   /* Enable GPIOs clock */
 133:Src/stm32f3xx_lp_modes.c ****   /* Warning : Reconfiguring all GPIO will close the connexion with the debugger */
 134:Src/stm32f3xx_lp_modes.c **** 
 135:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 136:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 137:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 138:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 139:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 140:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 141:Src/stm32f3xx_lp_modes.c **** 
 142:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 143:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 144:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 145:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Pin = GPIO_PIN_All;
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 4


 146:Src/stm32f3xx_lp_modes.c **** 
 147:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 148:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 149:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 150:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 151:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 152:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 153:Src/stm32f3xx_lp_modes.c **** 
 154:Src/stm32f3xx_lp_modes.c ****   /* Disable GPIOs clock */
 155:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOA_CLK_DISABLE();
 156:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_DISABLE();
 157:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_DISABLE();
 158:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_DISABLE();
 159:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_DISABLE();
 160:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_DISABLE();
 161:Src/stm32f3xx_lp_modes.c **** 
 162:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Instance = RTC;
 163:Src/stm32f3xx_lp_modes.c **** 
 164:Src/stm32f3xx_lp_modes.c ****   /* Configure RTC prescaler and RTC data registers as follows:
 165:Src/stm32f3xx_lp_modes.c ****   - Hour Format = Format 24
 166:Src/stm32f3xx_lp_modes.c ****   - Asynch Prediv = Value according to source clock
 167:Src/stm32f3xx_lp_modes.c ****   - Synch Prediv = Value according to source clock
 168:Src/stm32f3xx_lp_modes.c ****   - OutPut = Output Disable
 169:Src/stm32f3xx_lp_modes.c ****   - OutPutPolarity = High Polarity
 170:Src/stm32f3xx_lp_modes.c ****   - OutPutType = Open Drain */
 171:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 172:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.AsynchPrediv = RTC_ASYNCH_PREDIV;
 173:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.SynchPrediv = RTC_SYNCH_PREDIV;
 174:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 175:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 176:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 177:Src/stm32f3xx_lp_modes.c **** 
 178:Src/stm32f3xx_lp_modes.c ****   if (HAL_RTC_Init(&RTCHandle) != HAL_OK)
 179:Src/stm32f3xx_lp_modes.c ****   {
 180:Src/stm32f3xx_lp_modes.c ****     /* Initialization Error */
 181:Src/stm32f3xx_lp_modes.c ****     Error_Handler();
 182:Src/stm32f3xx_lp_modes.c ****   }
 183:Src/stm32f3xx_lp_modes.c **** 
 184:Src/stm32f3xx_lp_modes.c ****   /*## Configure the Wake up timer ###########################################*/
 185:Src/stm32f3xx_lp_modes.c ****   /*  RTC Wakeup Interrupt Generation:
 186:Src/stm32f3xx_lp_modes.c ****       Wakeup Time Base = (RTC_WAKEUPCLOCK_RTCCLK_DIV /(LSE or LSI))
 187:Src/stm32f3xx_lp_modes.c ****       Wakeup Time = Wakeup Time Base * WakeUpCounter 
 188:Src/stm32f3xx_lp_modes.c ****                   = (RTC_WAKEUPCLOCK_RTCCLK_DIV /(LSE or LSI)) * WakeUpCounter
 189:Src/stm32f3xx_lp_modes.c ****       ==> WakeUpCounter = Wakeup Time / Wakeup Time Base
 190:Src/stm32f3xx_lp_modes.c **** 
 191:Src/stm32f3xx_lp_modes.c ****       To configure the wake up timer to 20s the WakeUpCounter is set to 0xA017:
 192:Src/stm32f3xx_lp_modes.c ****         RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16 
 193:Src/stm32f3xx_lp_modes.c ****         Wakeup Time Base = 16 /(~32.768KHz) = ~0,488 ms
 194:Src/stm32f3xx_lp_modes.c ****         Wakeup Time = ~20s = 0,488ms  * WakeUpCounter
 195:Src/stm32f3xx_lp_modes.c ****         ==> WakeUpCounter = ~20s/0,488ms = 40983 = 0xA017 */
 196:Src/stm32f3xx_lp_modes.c **** 
 197:Src/stm32f3xx_lp_modes.c ****   /* Disable Wake-up timer */
 198:Src/stm32f3xx_lp_modes.c ****   HAL_RTCEx_DeactivateWakeUpTimer(&RTCHandle);
 199:Src/stm32f3xx_lp_modes.c **** 
 200:Src/stm32f3xx_lp_modes.c ****   HAL_RTCEx_SetWakeUpTimer_IT(&RTCHandle, 0xA017, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 201:Src/stm32f3xx_lp_modes.c **** 
 202:Src/stm32f3xx_lp_modes.c **** 
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 5


 203:Src/stm32f3xx_lp_modes.c ****   /* Configure User push-button as external interrupt generator */
 204:Src/stm32f3xx_lp_modes.c ****   BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 205:Src/stm32f3xx_lp_modes.c **** 
 206:Src/stm32f3xx_lp_modes.c ****   /* Enter Stop Mode */
 207:Src/stm32f3xx_lp_modes.c ****   HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 208:Src/stm32f3xx_lp_modes.c **** 
 209:Src/stm32f3xx_lp_modes.c ****   /* Configures system clock after wake-up from STOP: enable HSE, PLL and select
 210:Src/stm32f3xx_lp_modes.c ****   PLL as system clock source (HSE and PLL are disabled in STOP mode) */
 211:Src/stm32f3xx_lp_modes.c ****   SYSCLKConfig_STOP();
 212:Src/stm32f3xx_lp_modes.c **** 
 213:Src/stm32f3xx_lp_modes.c ****   /* Disable Wake-up timer */
 214:Src/stm32f3xx_lp_modes.c ****   HAL_RTCEx_DeactivateWakeUpTimer(&RTCHandle);
 215:Src/stm32f3xx_lp_modes.c **** }
 216:Src/stm32f3xx_lp_modes.c **** 
 217:Src/stm32f3xx_lp_modes.c **** /**
 218:Src/stm32f3xx_lp_modes.c ****   * @brief  This function configures the system to enter Standby mode for
 219:Src/stm32f3xx_lp_modes.c ****   *         current consumption measurement purpose.
 220:Src/stm32f3xx_lp_modes.c ****   *         STANDBY Mode
 221:Src/stm32f3xx_lp_modes.c ****   *         ============
 222:Src/stm32f3xx_lp_modes.c ****   *           - RTC OFF
 223:Src/stm32f3xx_lp_modes.c ****   *           - IWDG and LSI OFF
 224:Src/stm32f3xx_lp_modes.c ****   *           - Wakeup using WakeUp Pin (PA.00)
 225:Src/stm32f3xx_lp_modes.c ****   * @param  None
 226:Src/stm32f3xx_lp_modes.c ****   * @retval None
 227:Src/stm32f3xx_lp_modes.c ****   */
 228:Src/stm32f3xx_lp_modes.c **** void StandbyMode_Measure(void)
 229:Src/stm32f3xx_lp_modes.c **** {
 230:Src/stm32f3xx_lp_modes.c ****   /* Enable Power Clock*/
 231:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 232:Src/stm32f3xx_lp_modes.c **** 
 233:Src/stm32f3xx_lp_modes.c ****   /* Allow access to Backup */
 234:Src/stm32f3xx_lp_modes.c ****   HAL_PWR_EnableBkUpAccess();
 235:Src/stm32f3xx_lp_modes.c **** 
 236:Src/stm32f3xx_lp_modes.c ****   /* Reset RTC Domain */
 237:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_BACKUPRESET_FORCE();
 238:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_BACKUPRESET_RELEASE();
 239:Src/stm32f3xx_lp_modes.c ****   
 240:Src/stm32f3xx_lp_modes.c ****   /* The Following Wakeup sequence is highly recommended prior to each Standby mode entry
 241:Src/stm32f3xx_lp_modes.c ****      mainly  when using more than one wakeup source this is to not miss any wakeup event.
 242:Src/stm32f3xx_lp_modes.c ****        - Disable all used wakeup sources,
 243:Src/stm32f3xx_lp_modes.c ****        - Clear all related wakeup flags, 
 244:Src/stm32f3xx_lp_modes.c ****        - Re-enable all used wakeup sources,
 245:Src/stm32f3xx_lp_modes.c ****        - Enter the Standby mode.
 246:Src/stm32f3xx_lp_modes.c ****   */
 247:Src/stm32f3xx_lp_modes.c ****   
 248:Src/stm32f3xx_lp_modes.c ****   /*#### Disable all used wakeup sources: WKUP pin ###########################*/
 249:Src/stm32f3xx_lp_modes.c ****   HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 250:Src/stm32f3xx_lp_modes.c ****   
 251:Src/stm32f3xx_lp_modes.c ****   /*#### Clear all related wakeup flags ######################################*/
 252:Src/stm32f3xx_lp_modes.c ****   /* Clear PWR wake up Flag */
 253:Src/stm32f3xx_lp_modes.c ****   __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 254:Src/stm32f3xx_lp_modes.c ****   
 255:Src/stm32f3xx_lp_modes.c ****   /* Enable WKUP pin */
 256:Src/stm32f3xx_lp_modes.c ****   HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 257:Src/stm32f3xx_lp_modes.c ****   
 258:Src/stm32f3xx_lp_modes.c ****   /* a 200 ms-delay is needed between enabling WKUP pin and
 259:Src/stm32f3xx_lp_modes.c ****      actually entering standby mode.
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 6


 260:Src/stm32f3xx_lp_modes.c ****   */
 261:Src/stm32f3xx_lp_modes.c ****   HAL_Delay(200);
 262:Src/stm32f3xx_lp_modes.c **** 
 263:Src/stm32f3xx_lp_modes.c ****   /* Request to enter STANDBY mode */
 264:Src/stm32f3xx_lp_modes.c ****   HAL_PWR_EnterSTANDBYMode();
 265:Src/stm32f3xx_lp_modes.c **** }
 266:Src/stm32f3xx_lp_modes.c **** 
 267:Src/stm32f3xx_lp_modes.c **** /**
 268:Src/stm32f3xx_lp_modes.c ****   * @brief  This function configures the system to enter Standby mode with RTC
 269:Src/stm32f3xx_lp_modes.c ****   *         clocked by LSE or LSI for current consumption measurement purpose.
 270:Src/stm32f3xx_lp_modes.c ****   *         STANDBY Mode with RTC clocked by LSE/LSI
 271:Src/stm32f3xx_lp_modes.c ****   *         ========================================
 272:Src/stm32f3xx_lp_modes.c ****   *           - RTC Clocked by LSE/LSI
 273:Src/stm32f3xx_lp_modes.c ****   *           - IWDG OFF
 274:Src/stm32f3xx_lp_modes.c ****   *           - Automatic Wakeup using RTC clocked by LSE/LSI (after ~20s)
 275:Src/stm32f3xx_lp_modes.c ****   * @param  None
 276:Src/stm32f3xx_lp_modes.c ****   * @retval None
 277:Src/stm32f3xx_lp_modes.c ****   */
 278:Src/stm32f3xx_lp_modes.c **** void StandbyRTCMode_Measure(void)
 279:Src/stm32f3xx_lp_modes.c **** {
 280:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Instance = RTC;
 281:Src/stm32f3xx_lp_modes.c ****   /* Configure RTC prescaler and RTC data registers as follows:
 282:Src/stm32f3xx_lp_modes.c ****   - Hour Format = Format 24
 283:Src/stm32f3xx_lp_modes.c ****   - Asynch Prediv = Value according to source clock
 284:Src/stm32f3xx_lp_modes.c ****   - Synch Prediv = Value according to source clock
 285:Src/stm32f3xx_lp_modes.c ****   - OutPut = Output Disable
 286:Src/stm32f3xx_lp_modes.c ****   - OutPutPolarity = High Polarity
 287:Src/stm32f3xx_lp_modes.c ****   - OutPutType = Open Drain */
 288:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 289:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.AsynchPrediv = RTC_ASYNCH_PREDIV;
 290:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.SynchPrediv = RTC_SYNCH_PREDIV;
 291:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 292:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 293:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 294:Src/stm32f3xx_lp_modes.c **** 
 295:Src/stm32f3xx_lp_modes.c ****   if (HAL_RTC_Init(&RTCHandle) != HAL_OK)
 296:Src/stm32f3xx_lp_modes.c ****   {
 297:Src/stm32f3xx_lp_modes.c ****     /* Initialization Error */
 298:Src/stm32f3xx_lp_modes.c ****     Error_Handler();
 299:Src/stm32f3xx_lp_modes.c ****   }
 300:Src/stm32f3xx_lp_modes.c **** 
 301:Src/stm32f3xx_lp_modes.c ****   /* The Following Wakeup sequence is highly recommended prior to each Standby mode entry
 302:Src/stm32f3xx_lp_modes.c ****      mainly  when using more than one wakeup source this is to not miss any wakeup event.
 303:Src/stm32f3xx_lp_modes.c ****        - Disable all used wakeup sources,
 304:Src/stm32f3xx_lp_modes.c ****        - Clear all related wakeup flags, 
 305:Src/stm32f3xx_lp_modes.c ****        - Re-enable all used wakeup sources,
 306:Src/stm32f3xx_lp_modes.c ****        - Enter the Standby mode.
 307:Src/stm32f3xx_lp_modes.c ****   */
 308:Src/stm32f3xx_lp_modes.c ****   /*#### Disable all used wakeup sources: Wake up Timer ######################*/
 309:Src/stm32f3xx_lp_modes.c ****   HAL_RTCEx_DeactivateWakeUpTimer(&RTCHandle);
 310:Src/stm32f3xx_lp_modes.c ****   
 311:Src/stm32f3xx_lp_modes.c ****   /*#### Clear all related wakeup flags ######################################*/
 312:Src/stm32f3xx_lp_modes.c ****   /* Clear PWR wake up Flag */
 313:Src/stm32f3xx_lp_modes.c ****   __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 314:Src/stm32f3xx_lp_modes.c ****   
 315:Src/stm32f3xx_lp_modes.c ****   /* Clear RTC Wake Up timer Flag */
 316:Src/stm32f3xx_lp_modes.c ****   __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&RTCHandle, RTC_FLAG_WUTF);
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 7


 317:Src/stm32f3xx_lp_modes.c ****     
 318:Src/stm32f3xx_lp_modes.c ****   /*#### Setting the Wake up time ############################################*/
 319:Src/stm32f3xx_lp_modes.c ****   /*  RTC Wakeup Interrupt Generation:
 320:Src/stm32f3xx_lp_modes.c ****       Wakeup Time Base = (RTC_WAKEUPCLOCK_RTCCLK_DIV /(LSE or LSI))
 321:Src/stm32f3xx_lp_modes.c ****       Wakeup Time = Wakeup Time Base * WakeUpCounter 
 322:Src/stm32f3xx_lp_modes.c ****                   = (RTC_WAKEUPCLOCK_RTCCLK_DIV /(LSE or LSI)) * WakeUpCounter
 323:Src/stm32f3xx_lp_modes.c ****       ==> WakeUpCounter = Wakeup Time / Wakeup Time Base
 324:Src/stm32f3xx_lp_modes.c **** 
 325:Src/stm32f3xx_lp_modes.c ****       To configure the wake up timer to 20s the WakeUpCounter is set to 0xA017:
 326:Src/stm32f3xx_lp_modes.c ****         RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16 
 327:Src/stm32f3xx_lp_modes.c ****         Wakeup Time Base = 16 /(~32.768KHz) = ~0,488 ms
 328:Src/stm32f3xx_lp_modes.c ****         Wakeup Time = ~20s = 0,488ms  * WakeUpCounter
 329:Src/stm32f3xx_lp_modes.c ****         ==> WakeUpCounter = ~20s/0,488ms = 40983 = 0xA017 */
 330:Src/stm32f3xx_lp_modes.c **** 
 331:Src/stm32f3xx_lp_modes.c ****   HAL_RTCEx_SetWakeUpTimer_IT(&RTCHandle, 0xA017, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 332:Src/stm32f3xx_lp_modes.c **** 
 333:Src/stm32f3xx_lp_modes.c ****   /* Request to enter STANDBY mode */
 334:Src/stm32f3xx_lp_modes.c ****   HAL_PWR_EnterSTANDBYMode();
 335:Src/stm32f3xx_lp_modes.c **** }
 336:Src/stm32f3xx_lp_modes.c **** 
 337:Src/stm32f3xx_lp_modes.c **** 
 338:Src/stm32f3xx_lp_modes.c **** /**
 339:Src/stm32f3xx_lp_modes.c ****   * @brief  Configures system clock after wake-up from STOP: enable HSE, PLL
 340:Src/stm32f3xx_lp_modes.c ****   *         and select PLL as system clock source.
 341:Src/stm32f3xx_lp_modes.c ****   * @param  None
 342:Src/stm32f3xx_lp_modes.c ****   * @retval None
 343:Src/stm32f3xx_lp_modes.c ****   */
 344:Src/stm32f3xx_lp_modes.c **** static void SYSCLKConfig_STOP(void)
 345:Src/stm32f3xx_lp_modes.c **** {
  28              		.loc 1 345 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 64
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 00B5     		push	{lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 14, -4
  36 0002 91B0     		sub	sp, sp, #68
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 72
 346:Src/stm32f3xx_lp_modes.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
  39              		.loc 1 346 3 view .LVU1
 347:Src/stm32f3xx_lp_modes.c ****   RCC_OscInitTypeDef RCC_OscInitStruct;
  40              		.loc 1 347 3 view .LVU2
 348:Src/stm32f3xx_lp_modes.c ****   uint32_t pFLatency = 0;
  41              		.loc 1 348 3 view .LVU3
  42              		.loc 1 348 12 is_stmt 0 view .LVU4
  43 0004 0023     		movs	r3, #0
  44 0006 0093     		str	r3, [sp]
 349:Src/stm32f3xx_lp_modes.c **** 
 350:Src/stm32f3xx_lp_modes.c ****   /* Get the Oscillators configuration according to the internal RCC registers */
 351:Src/stm32f3xx_lp_modes.c ****   HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
  45              		.loc 1 351 3 is_stmt 1 view .LVU5
  46 0008 01A8     		add	r0, sp, #4
  47 000a FFF7FEFF 		bl	HAL_RCC_GetOscConfig
  48              	.LVL0:
 352:Src/stm32f3xx_lp_modes.c **** 
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 8


 353:Src/stm32f3xx_lp_modes.c ****   /* After wake-up from STOP reconfigure the system clock: Enable HSE and PLL */
 354:Src/stm32f3xx_lp_modes.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  49              		.loc 1 354 3 view .LVU6
  50              		.loc 1 354 36 is_stmt 0 view .LVU7
  51 000e 0123     		movs	r3, #1
  52 0010 0193     		str	r3, [sp, #4]
 355:Src/stm32f3xx_lp_modes.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  53              		.loc 1 355 3 is_stmt 1 view .LVU8
  54              		.loc 1 355 30 is_stmt 0 view .LVU9
  55 0012 4FF48033 		mov	r3, #65536
  56 0016 0293     		str	r3, [sp, #8]
 356:Src/stm32f3xx_lp_modes.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  57              		.loc 1 356 3 is_stmt 1 view .LVU10
  58              		.loc 1 356 34 is_stmt 0 view .LVU11
  59 0018 0223     		movs	r3, #2
  60 001a 0893     		str	r3, [sp, #32]
 357:Src/stm32f3xx_lp_modes.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  61              		.loc 1 357 3 is_stmt 1 view .LVU12
  62              		.loc 1 357 7 is_stmt 0 view .LVU13
  63 001c 01A8     		add	r0, sp, #4
  64 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
  65              	.LVL1:
  66              		.loc 1 357 6 view .LVU14
  67 0022 78B9     		cbnz	r0, .L5
  68              	.L2:
 358:Src/stm32f3xx_lp_modes.c ****   {
 359:Src/stm32f3xx_lp_modes.c ****     Error_Handler();
 360:Src/stm32f3xx_lp_modes.c ****   }
 361:Src/stm32f3xx_lp_modes.c **** 
 362:Src/stm32f3xx_lp_modes.c ****   /* Get the Clocks configuration according to the internal RCC registers */
 363:Src/stm32f3xx_lp_modes.c ****   HAL_RCC_GetClockConfig(&RCC_ClkInitStruct, &pFLatency);
  69              		.loc 1 363 3 is_stmt 1 view .LVU15
  70 0024 6946     		mov	r1, sp
  71 0026 0BA8     		add	r0, sp, #44
  72 0028 FFF7FEFF 		bl	HAL_RCC_GetClockConfig
  73              	.LVL2:
 364:Src/stm32f3xx_lp_modes.c **** 
 365:Src/stm32f3xx_lp_modes.c ****   /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
 366:Src/stm32f3xx_lp_modes.c ****      clocks dividers */
 367:Src/stm32f3xx_lp_modes.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK;
  74              		.loc 1 367 3 view .LVU16
  75              		.loc 1 367 31 is_stmt 0 view .LVU17
  76 002c 0123     		movs	r3, #1
  77 002e 0B93     		str	r3, [sp, #44]
 368:Src/stm32f3xx_lp_modes.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  78              		.loc 1 368 3 is_stmt 1 view .LVU18
  79              		.loc 1 368 34 is_stmt 0 view .LVU19
  80 0030 0223     		movs	r3, #2
  81 0032 0C93     		str	r3, [sp, #48]
 369:Src/stm32f3xx_lp_modes.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, pFLatency) != HAL_OK)
  82              		.loc 1 369 3 is_stmt 1 view .LVU20
  83              		.loc 1 369 7 is_stmt 0 view .LVU21
  84 0034 0099     		ldr	r1, [sp]
  85 0036 0BA8     		add	r0, sp, #44
  86 0038 FFF7FEFF 		bl	HAL_RCC_ClockConfig
  87              	.LVL3:
  88              		.loc 1 369 6 view .LVU22
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 9


  89 003c 28B9     		cbnz	r0, .L6
  90              	.L1:
 370:Src/stm32f3xx_lp_modes.c ****   {
 371:Src/stm32f3xx_lp_modes.c ****     Error_Handler();
 372:Src/stm32f3xx_lp_modes.c ****   }
 373:Src/stm32f3xx_lp_modes.c **** }
  91              		.loc 1 373 1 view .LVU23
  92 003e 11B0     		add	sp, sp, #68
  93              	.LCFI2:
  94              		.cfi_remember_state
  95              		.cfi_def_cfa_offset 4
  96              		@ sp needed
  97 0040 5DF804FB 		ldr	pc, [sp], #4
  98              	.L5:
  99              	.LCFI3:
 100              		.cfi_restore_state
 359:Src/stm32f3xx_lp_modes.c ****   }
 101              		.loc 1 359 5 is_stmt 1 view .LVU24
 102 0044 FFF7FEFF 		bl	Error_Handler
 103              	.LVL4:
 104 0048 ECE7     		b	.L2
 105              	.L6:
 371:Src/stm32f3xx_lp_modes.c ****   }
 106              		.loc 1 371 5 view .LVU25
 107 004a FFF7FEFF 		bl	Error_Handler
 108              	.LVL5:
 109              		.loc 1 373 1 is_stmt 0 view .LVU26
 110 004e F6E7     		b	.L1
 111              		.cfi_endproc
 112              	.LFE134:
 114              		.section	.text.SleepMode_Measure,"ax",%progbits
 115              		.align	1
 116              		.global	SleepMode_Measure
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 120              		.fpu fpv4-sp-d16
 122              	SleepMode_Measure:
 123              	.LFB130:
  63:Src/stm32f3xx_lp_modes.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 124              		.loc 1 63 1 is_stmt 1 view -0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 48
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128 0000 30B5     		push	{r4, r5, lr}
 129              	.LCFI4:
 130              		.cfi_def_cfa_offset 12
 131              		.cfi_offset 4, -12
 132              		.cfi_offset 5, -8
 133              		.cfi_offset 14, -4
 134 0002 8DB0     		sub	sp, sp, #52
 135              	.LCFI5:
 136              		.cfi_def_cfa_offset 64
  64:Src/stm32f3xx_lp_modes.c **** 
 137              		.loc 1 64 3 view .LVU28
  69:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 138              		.loc 1 69 3 view .LVU29
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 10


 139              	.LBB7:
  69:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 140              		.loc 1 69 3 view .LVU30
  69:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 141              		.loc 1 69 3 view .LVU31
 142 0004 404C     		ldr	r4, .L9
 143 0006 6369     		ldr	r3, [r4, #20]
 144 0008 43F40033 		orr	r3, r3, #131072
 145 000c 6361     		str	r3, [r4, #20]
  69:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 146              		.loc 1 69 3 view .LVU32
 147 000e 6369     		ldr	r3, [r4, #20]
 148 0010 03F40033 		and	r3, r3, #131072
 149 0014 0193     		str	r3, [sp, #4]
  69:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 150              		.loc 1 69 3 view .LVU33
 151 0016 019B     		ldr	r3, [sp, #4]
 152              	.LBE7:
  69:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 153              		.loc 1 69 3 view .LVU34
  70:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 154              		.loc 1 70 3 view .LVU35
 155              	.LBB8:
  70:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 156              		.loc 1 70 3 view .LVU36
  70:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 157              		.loc 1 70 3 view .LVU37
 158 0018 6369     		ldr	r3, [r4, #20]
 159 001a 43F48023 		orr	r3, r3, #262144
 160 001e 6361     		str	r3, [r4, #20]
  70:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 161              		.loc 1 70 3 view .LVU38
 162 0020 6369     		ldr	r3, [r4, #20]
 163 0022 03F48023 		and	r3, r3, #262144
 164 0026 0293     		str	r3, [sp, #8]
  70:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 165              		.loc 1 70 3 view .LVU39
 166 0028 029B     		ldr	r3, [sp, #8]
 167              	.LBE8:
  70:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 168              		.loc 1 70 3 view .LVU40
  71:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 169              		.loc 1 71 3 view .LVU41
 170              	.LBB9:
  71:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 171              		.loc 1 71 3 view .LVU42
  71:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 172              		.loc 1 71 3 view .LVU43
 173 002a 6369     		ldr	r3, [r4, #20]
 174 002c 43F40023 		orr	r3, r3, #524288
 175 0030 6361     		str	r3, [r4, #20]
  71:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 176              		.loc 1 71 3 view .LVU44
 177 0032 6369     		ldr	r3, [r4, #20]
 178 0034 03F40023 		and	r3, r3, #524288
 179 0038 0393     		str	r3, [sp, #12]
  71:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 11


 180              		.loc 1 71 3 view .LVU45
 181 003a 039B     		ldr	r3, [sp, #12]
 182              	.LBE9:
  71:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 183              		.loc 1 71 3 view .LVU46
  72:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 184              		.loc 1 72 3 view .LVU47
 185              	.LBB10:
  72:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 186              		.loc 1 72 3 view .LVU48
  72:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 187              		.loc 1 72 3 view .LVU49
 188 003c 6369     		ldr	r3, [r4, #20]
 189 003e 43F48013 		orr	r3, r3, #1048576
 190 0042 6361     		str	r3, [r4, #20]
  72:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 191              		.loc 1 72 3 view .LVU50
 192 0044 6369     		ldr	r3, [r4, #20]
 193 0046 03F48013 		and	r3, r3, #1048576
 194 004a 0493     		str	r3, [sp, #16]
  72:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 195              		.loc 1 72 3 view .LVU51
 196 004c 049B     		ldr	r3, [sp, #16]
 197              	.LBE10:
  72:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 198              		.loc 1 72 3 view .LVU52
  73:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 199              		.loc 1 73 3 view .LVU53
 200              	.LBB11:
  73:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 201              		.loc 1 73 3 view .LVU54
  73:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 202              		.loc 1 73 3 view .LVU55
 203 004e 6369     		ldr	r3, [r4, #20]
 204 0050 43F40013 		orr	r3, r3, #2097152
 205 0054 6361     		str	r3, [r4, #20]
  73:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 206              		.loc 1 73 3 view .LVU56
 207 0056 6369     		ldr	r3, [r4, #20]
 208 0058 03F40013 		and	r3, r3, #2097152
 209 005c 0593     		str	r3, [sp, #20]
  73:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 210              		.loc 1 73 3 view .LVU57
 211 005e 059B     		ldr	r3, [sp, #20]
 212              	.LBE11:
  73:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 213              		.loc 1 73 3 view .LVU58
  74:Src/stm32f3xx_lp_modes.c **** 
 214              		.loc 1 74 3 view .LVU59
 215              	.LBB12:
  74:Src/stm32f3xx_lp_modes.c **** 
 216              		.loc 1 74 3 view .LVU60
  74:Src/stm32f3xx_lp_modes.c **** 
 217              		.loc 1 74 3 view .LVU61
 218 0060 6369     		ldr	r3, [r4, #20]
 219 0062 43F48003 		orr	r3, r3, #4194304
 220 0066 6361     		str	r3, [r4, #20]
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 12


  74:Src/stm32f3xx_lp_modes.c **** 
 221              		.loc 1 74 3 view .LVU62
 222 0068 6369     		ldr	r3, [r4, #20]
 223 006a 03F48003 		and	r3, r3, #4194304
 224 006e 0693     		str	r3, [sp, #24]
  74:Src/stm32f3xx_lp_modes.c **** 
 225              		.loc 1 74 3 view .LVU63
 226 0070 069B     		ldr	r3, [sp, #24]
 227              	.LBE12:
  74:Src/stm32f3xx_lp_modes.c **** 
 228              		.loc 1 74 3 view .LVU64
  76:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 229              		.loc 1 76 3 view .LVU65
  76:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 230              		.loc 1 76 24 is_stmt 0 view .LVU66
 231 0072 0323     		movs	r3, #3
 232 0074 0893     		str	r3, [sp, #32]
  77:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 233              		.loc 1 77 3 is_stmt 1 view .LVU67
  77:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 234              		.loc 1 77 25 is_stmt 0 view .LVU68
 235 0076 0A93     		str	r3, [sp, #40]
  78:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Pin = GPIO_PIN_All;
 236              		.loc 1 78 3 is_stmt 1 view .LVU69
  78:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Pin = GPIO_PIN_All;
 237              		.loc 1 78 24 is_stmt 0 view .LVU70
 238 0078 0025     		movs	r5, #0
 239 007a 0995     		str	r5, [sp, #36]
  79:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 240              		.loc 1 79 3 is_stmt 1 view .LVU71
  79:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 241              		.loc 1 79 23 is_stmt 0 view .LVU72
 242 007c 4FF6FF73 		movw	r3, #65535
 243 0080 0793     		str	r3, [sp, #28]
  80:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 244              		.loc 1 80 3 is_stmt 1 view .LVU73
 245 0082 07A9     		add	r1, sp, #28
 246 0084 4FF09040 		mov	r0, #1207959552
 247 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 248              	.LVL6:
  81:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 249              		.loc 1 81 3 view .LVU74
 250 008c 07A9     		add	r1, sp, #28
 251 008e 1F48     		ldr	r0, .L9+4
 252 0090 FFF7FEFF 		bl	HAL_GPIO_Init
 253              	.LVL7:
  82:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 254              		.loc 1 82 3 view .LVU75
 255 0094 07A9     		add	r1, sp, #28
 256 0096 1E48     		ldr	r0, .L9+8
 257 0098 FFF7FEFF 		bl	HAL_GPIO_Init
 258              	.LVL8:
  83:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 259              		.loc 1 83 3 view .LVU76
 260 009c 07A9     		add	r1, sp, #28
 261 009e 1D48     		ldr	r0, .L9+12
 262 00a0 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 13


 263              	.LVL9:
  84:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 264              		.loc 1 84 3 view .LVU77
 265 00a4 07A9     		add	r1, sp, #28
 266 00a6 1C48     		ldr	r0, .L9+16
 267 00a8 FFF7FEFF 		bl	HAL_GPIO_Init
 268              	.LVL10:
  85:Src/stm32f3xx_lp_modes.c **** 
 269              		.loc 1 85 3 view .LVU78
 270 00ac 07A9     		add	r1, sp, #28
 271 00ae 1B48     		ldr	r0, .L9+20
 272 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 273              	.LVL11:
  88:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_DISABLE();
 274              		.loc 1 88 3 view .LVU79
 275 00b4 6369     		ldr	r3, [r4, #20]
 276 00b6 23F40033 		bic	r3, r3, #131072
 277 00ba 6361     		str	r3, [r4, #20]
  89:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_DISABLE();
 278              		.loc 1 89 3 view .LVU80
 279 00bc 6369     		ldr	r3, [r4, #20]
 280 00be 23F48023 		bic	r3, r3, #262144
 281 00c2 6361     		str	r3, [r4, #20]
  90:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_DISABLE();
 282              		.loc 1 90 3 view .LVU81
 283 00c4 6369     		ldr	r3, [r4, #20]
 284 00c6 23F40023 		bic	r3, r3, #524288
 285 00ca 6361     		str	r3, [r4, #20]
  91:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_DISABLE();
 286              		.loc 1 91 3 view .LVU82
 287 00cc 6369     		ldr	r3, [r4, #20]
 288 00ce 23F48013 		bic	r3, r3, #1048576
 289 00d2 6361     		str	r3, [r4, #20]
  92:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_DISABLE();
 290              		.loc 1 92 3 view .LVU83
 291 00d4 6369     		ldr	r3, [r4, #20]
 292 00d6 23F40013 		bic	r3, r3, #2097152
 293 00da 6361     		str	r3, [r4, #20]
  93:Src/stm32f3xx_lp_modes.c **** 
 294              		.loc 1 93 3 view .LVU84
 295 00dc 6369     		ldr	r3, [r4, #20]
 296 00de 23F48003 		bic	r3, r3, #4194304
 297 00e2 6361     		str	r3, [r4, #20]
  96:Src/stm32f3xx_lp_modes.c **** 
 298              		.loc 1 96 3 view .LVU85
 299 00e4 0121     		movs	r1, #1
 300 00e6 2846     		mov	r0, r5
 301 00e8 FFF7FEFF 		bl	BSP_PB_Init
 302              	.LVL12:
 100:Src/stm32f3xx_lp_modes.c **** 
 303              		.loc 1 100 3 view .LVU86
 304 00ec FFF7FEFF 		bl	HAL_SuspendTick
 305              	.LVL13:
 103:Src/stm32f3xx_lp_modes.c **** 
 306              		.loc 1 103 3 view .LVU87
 307 00f0 0121     		movs	r1, #1
 308 00f2 2846     		mov	r0, r5
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 14


 309 00f4 FFF7FEFF 		bl	HAL_PWR_EnterSLEEPMode
 310              	.LVL14:
 106:Src/stm32f3xx_lp_modes.c **** 
 311              		.loc 1 106 3 view .LVU88
 312 00f8 FFF7FEFF 		bl	HAL_ResumeTick
 313              	.LVL15:
 109:Src/stm32f3xx_lp_modes.c **** }
 314              		.loc 1 109 3 view .LVU89
 315 00fc 2846     		mov	r0, r5
 316 00fe FFF7FEFF 		bl	BSP_LED_Init
 317              	.LVL16:
 110:Src/stm32f3xx_lp_modes.c **** 
 318              		.loc 1 110 1 is_stmt 0 view .LVU90
 319 0102 0DB0     		add	sp, sp, #52
 320              	.LCFI6:
 321              		.cfi_def_cfa_offset 12
 322              		@ sp needed
 323 0104 30BD     		pop	{r4, r5, pc}
 324              	.L10:
 325 0106 00BF     		.align	2
 326              	.L9:
 327 0108 00100240 		.word	1073876992
 328 010c 00040048 		.word	1207960576
 329 0110 00080048 		.word	1207961600
 330 0114 000C0048 		.word	1207962624
 331 0118 00100048 		.word	1207963648
 332 011c 00140048 		.word	1207964672
 333              		.cfi_endproc
 334              	.LFE130:
 336              		.section	.text.StopRTCMode_Measure,"ax",%progbits
 337              		.align	1
 338              		.global	StopRTCMode_Measure
 339              		.syntax unified
 340              		.thumb
 341              		.thumb_func
 342              		.fpu fpv4-sp-d16
 344              	StopRTCMode_Measure:
 345              	.LFB131:
 128:Src/stm32f3xx_lp_modes.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 346              		.loc 1 128 1 is_stmt 1 view -0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 48
 349              		@ frame_needed = 0, uses_anonymous_args = 0
 350 0000 30B5     		push	{r4, r5, lr}
 351              	.LCFI7:
 352              		.cfi_def_cfa_offset 12
 353              		.cfi_offset 4, -12
 354              		.cfi_offset 5, -8
 355              		.cfi_offset 14, -4
 356 0002 8DB0     		sub	sp, sp, #52
 357              	.LCFI8:
 358              		.cfi_def_cfa_offset 64
 129:Src/stm32f3xx_lp_modes.c **** 
 359              		.loc 1 129 3 view .LVU92
 135:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 360              		.loc 1 135 3 view .LVU93
 361              	.LBB13:
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 15


 135:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 362              		.loc 1 135 3 view .LVU94
 135:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 363              		.loc 1 135 3 view .LVU95
 364 0004 4D4C     		ldr	r4, .L15
 365 0006 6369     		ldr	r3, [r4, #20]
 366 0008 43F40033 		orr	r3, r3, #131072
 367 000c 6361     		str	r3, [r4, #20]
 135:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 368              		.loc 1 135 3 view .LVU96
 369 000e 6369     		ldr	r3, [r4, #20]
 370 0010 03F40033 		and	r3, r3, #131072
 371 0014 0193     		str	r3, [sp, #4]
 135:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 372              		.loc 1 135 3 view .LVU97
 373 0016 019B     		ldr	r3, [sp, #4]
 374              	.LBE13:
 135:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 375              		.loc 1 135 3 view .LVU98
 136:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 376              		.loc 1 136 3 view .LVU99
 377              	.LBB14:
 136:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 378              		.loc 1 136 3 view .LVU100
 136:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 379              		.loc 1 136 3 view .LVU101
 380 0018 6369     		ldr	r3, [r4, #20]
 381 001a 43F48023 		orr	r3, r3, #262144
 382 001e 6361     		str	r3, [r4, #20]
 136:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 383              		.loc 1 136 3 view .LVU102
 384 0020 6369     		ldr	r3, [r4, #20]
 385 0022 03F48023 		and	r3, r3, #262144
 386 0026 0293     		str	r3, [sp, #8]
 136:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 387              		.loc 1 136 3 view .LVU103
 388 0028 029B     		ldr	r3, [sp, #8]
 389              	.LBE14:
 136:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 390              		.loc 1 136 3 view .LVU104
 137:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 391              		.loc 1 137 3 view .LVU105
 392              	.LBB15:
 137:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 393              		.loc 1 137 3 view .LVU106
 137:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 394              		.loc 1 137 3 view .LVU107
 395 002a 6369     		ldr	r3, [r4, #20]
 396 002c 43F40023 		orr	r3, r3, #524288
 397 0030 6361     		str	r3, [r4, #20]
 137:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 398              		.loc 1 137 3 view .LVU108
 399 0032 6369     		ldr	r3, [r4, #20]
 400 0034 03F40023 		and	r3, r3, #524288
 401 0038 0393     		str	r3, [sp, #12]
 137:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 402              		.loc 1 137 3 view .LVU109
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 16


 403 003a 039B     		ldr	r3, [sp, #12]
 404              	.LBE15:
 137:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 405              		.loc 1 137 3 view .LVU110
 138:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 406              		.loc 1 138 3 view .LVU111
 407              	.LBB16:
 138:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 408              		.loc 1 138 3 view .LVU112
 138:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 409              		.loc 1 138 3 view .LVU113
 410 003c 6369     		ldr	r3, [r4, #20]
 411 003e 43F48013 		orr	r3, r3, #1048576
 412 0042 6361     		str	r3, [r4, #20]
 138:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 413              		.loc 1 138 3 view .LVU114
 414 0044 6369     		ldr	r3, [r4, #20]
 415 0046 03F48013 		and	r3, r3, #1048576
 416 004a 0493     		str	r3, [sp, #16]
 138:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 417              		.loc 1 138 3 view .LVU115
 418 004c 049B     		ldr	r3, [sp, #16]
 419              	.LBE16:
 138:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_ENABLE();
 420              		.loc 1 138 3 view .LVU116
 139:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 421              		.loc 1 139 3 view .LVU117
 422              	.LBB17:
 139:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 423              		.loc 1 139 3 view .LVU118
 139:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 424              		.loc 1 139 3 view .LVU119
 425 004e 6369     		ldr	r3, [r4, #20]
 426 0050 43F40013 		orr	r3, r3, #2097152
 427 0054 6361     		str	r3, [r4, #20]
 139:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 428              		.loc 1 139 3 view .LVU120
 429 0056 6369     		ldr	r3, [r4, #20]
 430 0058 03F40013 		and	r3, r3, #2097152
 431 005c 0593     		str	r3, [sp, #20]
 139:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 432              		.loc 1 139 3 view .LVU121
 433 005e 059B     		ldr	r3, [sp, #20]
 434              	.LBE17:
 139:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 435              		.loc 1 139 3 view .LVU122
 140:Src/stm32f3xx_lp_modes.c **** 
 436              		.loc 1 140 3 view .LVU123
 437              	.LBB18:
 140:Src/stm32f3xx_lp_modes.c **** 
 438              		.loc 1 140 3 view .LVU124
 140:Src/stm32f3xx_lp_modes.c **** 
 439              		.loc 1 140 3 view .LVU125
 440 0060 6369     		ldr	r3, [r4, #20]
 441 0062 43F48003 		orr	r3, r3, #4194304
 442 0066 6361     		str	r3, [r4, #20]
 140:Src/stm32f3xx_lp_modes.c **** 
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 17


 443              		.loc 1 140 3 view .LVU126
 444 0068 6369     		ldr	r3, [r4, #20]
 445 006a 03F48003 		and	r3, r3, #4194304
 446 006e 0693     		str	r3, [sp, #24]
 140:Src/stm32f3xx_lp_modes.c **** 
 447              		.loc 1 140 3 view .LVU127
 448 0070 069B     		ldr	r3, [sp, #24]
 449              	.LBE18:
 140:Src/stm32f3xx_lp_modes.c **** 
 450              		.loc 1 140 3 view .LVU128
 142:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 451              		.loc 1 142 3 view .LVU129
 142:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 452              		.loc 1 142 24 is_stmt 0 view .LVU130
 453 0072 0323     		movs	r3, #3
 454 0074 0893     		str	r3, [sp, #32]
 143:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 455              		.loc 1 143 3 is_stmt 1 view .LVU131
 143:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 456              		.loc 1 143 25 is_stmt 0 view .LVU132
 457 0076 0A93     		str	r3, [sp, #40]
 144:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Pin = GPIO_PIN_All;
 458              		.loc 1 144 3 is_stmt 1 view .LVU133
 144:Src/stm32f3xx_lp_modes.c ****   GPIO_InitStruct.Pin = GPIO_PIN_All;
 459              		.loc 1 144 24 is_stmt 0 view .LVU134
 460 0078 0025     		movs	r5, #0
 461 007a 0995     		str	r5, [sp, #36]
 145:Src/stm32f3xx_lp_modes.c **** 
 462              		.loc 1 145 3 is_stmt 1 view .LVU135
 145:Src/stm32f3xx_lp_modes.c **** 
 463              		.loc 1 145 23 is_stmt 0 view .LVU136
 464 007c 4FF6FF73 		movw	r3, #65535
 465 0080 0793     		str	r3, [sp, #28]
 147:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 466              		.loc 1 147 3 is_stmt 1 view .LVU137
 467 0082 07A9     		add	r1, sp, #28
 468 0084 4FF09040 		mov	r0, #1207959552
 469 0088 FFF7FEFF 		bl	HAL_GPIO_Init
 470              	.LVL17:
 148:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 471              		.loc 1 148 3 view .LVU138
 472 008c 07A9     		add	r1, sp, #28
 473 008e 2C48     		ldr	r0, .L15+4
 474 0090 FFF7FEFF 		bl	HAL_GPIO_Init
 475              	.LVL18:
 149:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 476              		.loc 1 149 3 view .LVU139
 477 0094 07A9     		add	r1, sp, #28
 478 0096 2B48     		ldr	r0, .L15+8
 479 0098 FFF7FEFF 		bl	HAL_GPIO_Init
 480              	.LVL19:
 150:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 481              		.loc 1 150 3 view .LVU140
 482 009c 07A9     		add	r1, sp, #28
 483 009e 2A48     		ldr	r0, .L15+12
 484 00a0 FFF7FEFF 		bl	HAL_GPIO_Init
 485              	.LVL20:
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 18


 151:Src/stm32f3xx_lp_modes.c ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 486              		.loc 1 151 3 view .LVU141
 487 00a4 07A9     		add	r1, sp, #28
 488 00a6 2948     		ldr	r0, .L15+16
 489 00a8 FFF7FEFF 		bl	HAL_GPIO_Init
 490              	.LVL21:
 152:Src/stm32f3xx_lp_modes.c **** 
 491              		.loc 1 152 3 view .LVU142
 492 00ac 07A9     		add	r1, sp, #28
 493 00ae 2848     		ldr	r0, .L15+20
 494 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 495              	.LVL22:
 155:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOB_CLK_DISABLE();
 496              		.loc 1 155 3 view .LVU143
 497 00b4 6369     		ldr	r3, [r4, #20]
 498 00b6 23F40033 		bic	r3, r3, #131072
 499 00ba 6361     		str	r3, [r4, #20]
 156:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOC_CLK_DISABLE();
 500              		.loc 1 156 3 view .LVU144
 501 00bc 6369     		ldr	r3, [r4, #20]
 502 00be 23F48023 		bic	r3, r3, #262144
 503 00c2 6361     		str	r3, [r4, #20]
 157:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOD_CLK_DISABLE();
 504              		.loc 1 157 3 view .LVU145
 505 00c4 6369     		ldr	r3, [r4, #20]
 506 00c6 23F40023 		bic	r3, r3, #524288
 507 00ca 6361     		str	r3, [r4, #20]
 158:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOE_CLK_DISABLE();
 508              		.loc 1 158 3 view .LVU146
 509 00cc 6369     		ldr	r3, [r4, #20]
 510 00ce 23F48013 		bic	r3, r3, #1048576
 511 00d2 6361     		str	r3, [r4, #20]
 159:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_GPIOF_CLK_DISABLE();
 512              		.loc 1 159 3 view .LVU147
 513 00d4 6369     		ldr	r3, [r4, #20]
 514 00d6 23F40013 		bic	r3, r3, #2097152
 515 00da 6361     		str	r3, [r4, #20]
 160:Src/stm32f3xx_lp_modes.c **** 
 516              		.loc 1 160 3 view .LVU148
 517 00dc 6369     		ldr	r3, [r4, #20]
 518 00de 23F48003 		bic	r3, r3, #4194304
 519 00e2 6361     		str	r3, [r4, #20]
 162:Src/stm32f3xx_lp_modes.c **** 
 520              		.loc 1 162 3 view .LVU149
 162:Src/stm32f3xx_lp_modes.c **** 
 521              		.loc 1 162 22 is_stmt 0 view .LVU150
 522 00e4 1B48     		ldr	r0, .L15+24
 523 00e6 1C4B     		ldr	r3, .L15+28
 524 00e8 0360     		str	r3, [r0]
 171:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.AsynchPrediv = RTC_ASYNCH_PREDIV;
 525              		.loc 1 171 3 is_stmt 1 view .LVU151
 171:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.AsynchPrediv = RTC_ASYNCH_PREDIV;
 526              		.loc 1 171 29 is_stmt 0 view .LVU152
 527 00ea 4560     		str	r5, [r0, #4]
 172:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.SynchPrediv = RTC_SYNCH_PREDIV;
 528              		.loc 1 172 3 is_stmt 1 view .LVU153
 172:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.SynchPrediv = RTC_SYNCH_PREDIV;
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 19


 529              		.loc 1 172 31 is_stmt 0 view .LVU154
 530 00ec 7F23     		movs	r3, #127
 531 00ee 8360     		str	r3, [r0, #8]
 173:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 532              		.loc 1 173 3 is_stmt 1 view .LVU155
 173:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 533              		.loc 1 173 30 is_stmt 0 view .LVU156
 534 00f0 4FF49873 		mov	r3, #304
 535 00f4 C360     		str	r3, [r0, #12]
 174:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 536              		.loc 1 174 3 is_stmt 1 view .LVU157
 174:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 537              		.loc 1 174 25 is_stmt 0 view .LVU158
 538 00f6 0561     		str	r5, [r0, #16]
 175:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 539              		.loc 1 175 3 is_stmt 1 view .LVU159
 175:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 540              		.loc 1 175 33 is_stmt 0 view .LVU160
 541 00f8 4561     		str	r5, [r0, #20]
 176:Src/stm32f3xx_lp_modes.c **** 
 542              		.loc 1 176 3 is_stmt 1 view .LVU161
 176:Src/stm32f3xx_lp_modes.c **** 
 543              		.loc 1 176 29 is_stmt 0 view .LVU162
 544 00fa 8561     		str	r5, [r0, #24]
 178:Src/stm32f3xx_lp_modes.c ****   {
 545              		.loc 1 178 3 is_stmt 1 view .LVU163
 178:Src/stm32f3xx_lp_modes.c ****   {
 546              		.loc 1 178 7 is_stmt 0 view .LVU164
 547 00fc FFF7FEFF 		bl	HAL_RTC_Init
 548              	.LVL23:
 178:Src/stm32f3xx_lp_modes.c ****   {
 549              		.loc 1 178 6 view .LVU165
 550 0100 C0B9     		cbnz	r0, .L14
 551              	.L12:
 198:Src/stm32f3xx_lp_modes.c **** 
 552              		.loc 1 198 3 is_stmt 1 view .LVU166
 553 0102 144C     		ldr	r4, .L15+24
 554 0104 2046     		mov	r0, r4
 555 0106 FFF7FEFF 		bl	HAL_RTCEx_DeactivateWakeUpTimer
 556              	.LVL24:
 200:Src/stm32f3xx_lp_modes.c **** 
 557              		.loc 1 200 3 view .LVU167
 558 010a 0022     		movs	r2, #0
 559 010c 4AF21701 		movw	r1, #40983
 560 0110 2046     		mov	r0, r4
 561 0112 FFF7FEFF 		bl	HAL_RTCEx_SetWakeUpTimer_IT
 562              	.LVL25:
 204:Src/stm32f3xx_lp_modes.c **** 
 563              		.loc 1 204 3 view .LVU168
 564 0116 0121     		movs	r1, #1
 565 0118 0020     		movs	r0, #0
 566 011a FFF7FEFF 		bl	BSP_PB_Init
 567              	.LVL26:
 207:Src/stm32f3xx_lp_modes.c **** 
 568              		.loc 1 207 3 view .LVU169
 569 011e 0121     		movs	r1, #1
 570 0120 0846     		mov	r0, r1
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 20


 571 0122 FFF7FEFF 		bl	HAL_PWR_EnterSTOPMode
 572              	.LVL27:
 211:Src/stm32f3xx_lp_modes.c **** 
 573              		.loc 1 211 3 view .LVU170
 574 0126 FFF7FEFF 		bl	SYSCLKConfig_STOP
 575              	.LVL28:
 214:Src/stm32f3xx_lp_modes.c **** }
 576              		.loc 1 214 3 view .LVU171
 577 012a 2046     		mov	r0, r4
 578 012c FFF7FEFF 		bl	HAL_RTCEx_DeactivateWakeUpTimer
 579              	.LVL29:
 215:Src/stm32f3xx_lp_modes.c **** 
 580              		.loc 1 215 1 is_stmt 0 view .LVU172
 581 0130 0DB0     		add	sp, sp, #52
 582              	.LCFI9:
 583              		.cfi_remember_state
 584              		.cfi_def_cfa_offset 12
 585              		@ sp needed
 586 0132 30BD     		pop	{r4, r5, pc}
 587              	.L14:
 588              	.LCFI10:
 589              		.cfi_restore_state
 181:Src/stm32f3xx_lp_modes.c ****   }
 590              		.loc 1 181 5 is_stmt 1 view .LVU173
 591 0134 FFF7FEFF 		bl	Error_Handler
 592              	.LVL30:
 593 0138 E3E7     		b	.L12
 594              	.L16:
 595 013a 00BF     		.align	2
 596              	.L15:
 597 013c 00100240 		.word	1073876992
 598 0140 00040048 		.word	1207960576
 599 0144 00080048 		.word	1207961600
 600 0148 000C0048 		.word	1207962624
 601 014c 00100048 		.word	1207963648
 602 0150 00140048 		.word	1207964672
 603 0154 00000000 		.word	RTCHandle
 604 0158 00280040 		.word	1073752064
 605              		.cfi_endproc
 606              	.LFE131:
 608              		.section	.text.StandbyMode_Measure,"ax",%progbits
 609              		.align	1
 610              		.global	StandbyMode_Measure
 611              		.syntax unified
 612              		.thumb
 613              		.thumb_func
 614              		.fpu fpv4-sp-d16
 616              	StandbyMode_Measure:
 617              	.LFB132:
 229:Src/stm32f3xx_lp_modes.c ****   /* Enable Power Clock*/
 618              		.loc 1 229 1 view -0
 619              		.cfi_startproc
 620              		@ args = 0, pretend = 0, frame = 8
 621              		@ frame_needed = 0, uses_anonymous_args = 0
 622 0000 00B5     		push	{lr}
 623              	.LCFI11:
 624              		.cfi_def_cfa_offset 4
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 21


 625              		.cfi_offset 14, -4
 626 0002 83B0     		sub	sp, sp, #12
 627              	.LCFI12:
 628              		.cfi_def_cfa_offset 16
 231:Src/stm32f3xx_lp_modes.c **** 
 629              		.loc 1 231 3 view .LVU175
 630              	.LBB19:
 231:Src/stm32f3xx_lp_modes.c **** 
 631              		.loc 1 231 3 view .LVU176
 231:Src/stm32f3xx_lp_modes.c **** 
 632              		.loc 1 231 3 view .LVU177
 633 0004 194B     		ldr	r3, .L19
 634 0006 DA69     		ldr	r2, [r3, #28]
 635 0008 42F08052 		orr	r2, r2, #268435456
 636 000c DA61     		str	r2, [r3, #28]
 231:Src/stm32f3xx_lp_modes.c **** 
 637              		.loc 1 231 3 view .LVU178
 638 000e DB69     		ldr	r3, [r3, #28]
 639 0010 03F08053 		and	r3, r3, #268435456
 640 0014 0193     		str	r3, [sp, #4]
 231:Src/stm32f3xx_lp_modes.c **** 
 641              		.loc 1 231 3 view .LVU179
 642 0016 019B     		ldr	r3, [sp, #4]
 643              	.LBE19:
 231:Src/stm32f3xx_lp_modes.c **** 
 644              		.loc 1 231 3 view .LVU180
 234:Src/stm32f3xx_lp_modes.c **** 
 645              		.loc 1 234 3 view .LVU181
 646 0018 FFF7FEFF 		bl	HAL_PWR_EnableBkUpAccess
 647              	.LVL31:
 237:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_BACKUPRESET_RELEASE();
 648              		.loc 1 237 3 view .LVU182
 649              	.LBB20:
 650              	.LBI20:
 651              		.file 2 "STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h"
   1:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 22


  23:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 23


  80:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 24


 137:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 25


 194:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 26


 251:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 27


 308:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 28


 365:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 29


 422:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 30


 479:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 31


 536:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 32


 593:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 33


 650:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 34


 707:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 35


 764:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 36


 821:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 37


 878:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 38


 935:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 947:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 652              		.loc 2 981 31 view .LVU183
 653              	.LBB21:
 982:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 654              		.loc 2 983 3 view .LVU184
 984:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 39


 655              		.loc 2 988 4 view .LVU185
 656 001c 4FF48033 		mov	r3, #65536
 657              		.syntax unified
 658              	@ 988 "STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 659 0020 93FAA3F2 		rbit r2, r3
 660              	@ 0 "" 2
 661              	.LVL32:
 989:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 990:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 991:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 992:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 993:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 994:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 995:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 996:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 997:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 998:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 999:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1000:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1001:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 662              		.loc 2 1001 3 view .LVU186
 663              		.loc 2 1001 3 is_stmt 0 view .LVU187
 664              		.thumb
 665              		.syntax unified
 666              	.LBE21:
 667              	.LBE20:
 237:Src/stm32f3xx_lp_modes.c ****   __HAL_RCC_BACKUPRESET_RELEASE();
 668              		.loc 1 237 3 view .LVU188
 669 0024 B2FA82F2 		clz	r2, r2
 670 0028 1149     		ldr	r1, .L19+4
 671 002a 0A44     		add	r2, r2, r1
 672 002c 9200     		lsls	r2, r2, #2
 673 002e 0120     		movs	r0, #1
 674 0030 1060     		str	r0, [r2]
 238:Src/stm32f3xx_lp_modes.c ****   
 675              		.loc 1 238 3 is_stmt 1 view .LVU189
 676              	.LVL33:
 677              	.LBB22:
 678              	.LBI22:
 981:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 679              		.loc 2 981 31 view .LVU190
 680              	.LBB23:
 983:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 681              		.loc 2 983 3 view .LVU191
 988:STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 682              		.loc 2 988 4 view .LVU192
 683              		.syntax unified
 684              	@ 988 "STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 685 0032 93FAA3F3 		rbit r3, r3
 686              	@ 0 "" 2
 687              	.LVL34:
 688              		.loc 2 1001 3 view .LVU193
 689              		.loc 2 1001 3 is_stmt 0 view .LVU194
 690              		.thumb
 691              		.syntax unified
 692              	.LBE23:
 693              	.LBE22:
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 40


 238:Src/stm32f3xx_lp_modes.c ****   
 694              		.loc 1 238 3 view .LVU195
 695 0036 B3FA83F3 		clz	r3, r3
 696 003a 0B44     		add	r3, r3, r1
 697 003c 9B00     		lsls	r3, r3, #2
 698 003e 0022     		movs	r2, #0
 699 0040 1A60     		str	r2, [r3]
 249:Src/stm32f3xx_lp_modes.c ****   
 700              		.loc 1 249 3 is_stmt 1 view .LVU196
 701 0042 4FF48070 		mov	r0, #256
 702 0046 FFF7FEFF 		bl	HAL_PWR_DisableWakeUpPin
 703              	.LVL35:
 253:Src/stm32f3xx_lp_modes.c ****   
 704              		.loc 1 253 3 view .LVU197
 705 004a 0A4A     		ldr	r2, .L19+8
 706 004c 1368     		ldr	r3, [r2]
 707 004e 43F00403 		orr	r3, r3, #4
 708 0052 1360     		str	r3, [r2]
 256:Src/stm32f3xx_lp_modes.c ****   
 709              		.loc 1 256 3 view .LVU198
 710 0054 4FF48070 		mov	r0, #256
 711 0058 FFF7FEFF 		bl	HAL_PWR_EnableWakeUpPin
 712              	.LVL36:
 261:Src/stm32f3xx_lp_modes.c **** 
 713              		.loc 1 261 3 view .LVU199
 714 005c C820     		movs	r0, #200
 715 005e FFF7FEFF 		bl	HAL_Delay
 716              	.LVL37:
 264:Src/stm32f3xx_lp_modes.c **** }
 717              		.loc 1 264 3 view .LVU200
 718 0062 FFF7FEFF 		bl	HAL_PWR_EnterSTANDBYMode
 719              	.LVL38:
 265:Src/stm32f3xx_lp_modes.c **** 
 720              		.loc 1 265 1 is_stmt 0 view .LVU201
 721 0066 03B0     		add	sp, sp, #12
 722              	.LCFI13:
 723              		.cfi_def_cfa_offset 4
 724              		@ sp needed
 725 0068 5DF804FB 		ldr	pc, [sp], #4
 726              	.L20:
 727              		.align	2
 728              	.L19:
 729 006c 00100240 		.word	1073876992
 730 0070 00819010 		.word	277905664
 731 0074 00700040 		.word	1073770496
 732              		.cfi_endproc
 733              	.LFE132:
 735              		.section	.text.StandbyRTCMode_Measure,"ax",%progbits
 736              		.align	1
 737              		.global	StandbyRTCMode_Measure
 738              		.syntax unified
 739              		.thumb
 740              		.thumb_func
 741              		.fpu fpv4-sp-d16
 743              	StandbyRTCMode_Measure:
 744              	.LFB133:
 279:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Instance = RTC;
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 41


 745              		.loc 1 279 1 is_stmt 1 view -0
 746              		.cfi_startproc
 747              		@ args = 0, pretend = 0, frame = 0
 748              		@ frame_needed = 0, uses_anonymous_args = 0
 749 0000 10B5     		push	{r4, lr}
 750              	.LCFI14:
 751              		.cfi_def_cfa_offset 8
 752              		.cfi_offset 4, -8
 753              		.cfi_offset 14, -4
 280:Src/stm32f3xx_lp_modes.c ****   /* Configure RTC prescaler and RTC data registers as follows:
 754              		.loc 1 280 3 view .LVU203
 280:Src/stm32f3xx_lp_modes.c ****   /* Configure RTC prescaler and RTC data registers as follows:
 755              		.loc 1 280 22 is_stmt 0 view .LVU204
 756 0002 1548     		ldr	r0, .L25
 757 0004 154B     		ldr	r3, .L25+4
 758 0006 0360     		str	r3, [r0]
 288:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.AsynchPrediv = RTC_ASYNCH_PREDIV;
 759              		.loc 1 288 3 is_stmt 1 view .LVU205
 288:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.AsynchPrediv = RTC_ASYNCH_PREDIV;
 760              		.loc 1 288 29 is_stmt 0 view .LVU206
 761 0008 0023     		movs	r3, #0
 762 000a 4360     		str	r3, [r0, #4]
 289:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.SynchPrediv = RTC_SYNCH_PREDIV;
 763              		.loc 1 289 3 is_stmt 1 view .LVU207
 289:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.SynchPrediv = RTC_SYNCH_PREDIV;
 764              		.loc 1 289 31 is_stmt 0 view .LVU208
 765 000c 7F22     		movs	r2, #127
 766 000e 8260     		str	r2, [r0, #8]
 290:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 767              		.loc 1 290 3 is_stmt 1 view .LVU209
 290:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 768              		.loc 1 290 30 is_stmt 0 view .LVU210
 769 0010 4FF49872 		mov	r2, #304
 770 0014 C260     		str	r2, [r0, #12]
 291:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 771              		.loc 1 291 3 is_stmt 1 view .LVU211
 291:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 772              		.loc 1 291 25 is_stmt 0 view .LVU212
 773 0016 0361     		str	r3, [r0, #16]
 292:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 774              		.loc 1 292 3 is_stmt 1 view .LVU213
 292:Src/stm32f3xx_lp_modes.c ****   RTCHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 775              		.loc 1 292 33 is_stmt 0 view .LVU214
 776 0018 4361     		str	r3, [r0, #20]
 293:Src/stm32f3xx_lp_modes.c **** 
 777              		.loc 1 293 3 is_stmt 1 view .LVU215
 293:Src/stm32f3xx_lp_modes.c **** 
 778              		.loc 1 293 29 is_stmt 0 view .LVU216
 779 001a 8361     		str	r3, [r0, #24]
 295:Src/stm32f3xx_lp_modes.c ****   {
 780              		.loc 1 295 3 is_stmt 1 view .LVU217
 295:Src/stm32f3xx_lp_modes.c ****   {
 781              		.loc 1 295 7 is_stmt 0 view .LVU218
 782 001c FFF7FEFF 		bl	HAL_RTC_Init
 783              	.LVL39:
 295:Src/stm32f3xx_lp_modes.c ****   {
 784              		.loc 1 295 6 view .LVU219
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 42


 785 0020 B8B9     		cbnz	r0, .L24
 786              	.L22:
 309:Src/stm32f3xx_lp_modes.c ****   
 787              		.loc 1 309 3 is_stmt 1 view .LVU220
 788 0022 0D4C     		ldr	r4, .L25
 789 0024 2046     		mov	r0, r4
 790 0026 FFF7FEFF 		bl	HAL_RTCEx_DeactivateWakeUpTimer
 791              	.LVL40:
 313:Src/stm32f3xx_lp_modes.c ****   
 792              		.loc 1 313 3 view .LVU221
 793 002a 0D4A     		ldr	r2, .L25+8
 794 002c 1368     		ldr	r3, [r2]
 795 002e 43F00403 		orr	r3, r3, #4
 796 0032 1360     		str	r3, [r2]
 316:Src/stm32f3xx_lp_modes.c ****     
 797              		.loc 1 316 3 view .LVU222
 798 0034 2268     		ldr	r2, [r4]
 799 0036 D368     		ldr	r3, [r2, #12]
 800 0038 DBB2     		uxtb	r3, r3
 801 003a 63F49063 		orn	r3, r3, #1152
 802 003e D360     		str	r3, [r2, #12]
 331:Src/stm32f3xx_lp_modes.c **** 
 803              		.loc 1 331 3 view .LVU223
 804 0040 0022     		movs	r2, #0
 805 0042 4AF21701 		movw	r1, #40983
 806 0046 2046     		mov	r0, r4
 807 0048 FFF7FEFF 		bl	HAL_RTCEx_SetWakeUpTimer_IT
 808              	.LVL41:
 334:Src/stm32f3xx_lp_modes.c **** }
 809              		.loc 1 334 3 view .LVU224
 810 004c FFF7FEFF 		bl	HAL_PWR_EnterSTANDBYMode
 811              	.LVL42:
 335:Src/stm32f3xx_lp_modes.c **** 
 812              		.loc 1 335 1 is_stmt 0 view .LVU225
 813 0050 10BD     		pop	{r4, pc}
 814              	.L24:
 298:Src/stm32f3xx_lp_modes.c ****   }
 815              		.loc 1 298 5 is_stmt 1 view .LVU226
 816 0052 FFF7FEFF 		bl	Error_Handler
 817              	.LVL43:
 818 0056 E4E7     		b	.L22
 819              	.L26:
 820              		.align	2
 821              	.L25:
 822 0058 00000000 		.word	RTCHandle
 823 005c 00280040 		.word	1073752064
 824 0060 00700040 		.word	1073770496
 825              		.cfi_endproc
 826              	.LFE133:
 828              		.comm	RTCHandle,32,4
 829              		.text
 830              	.Letext0:
 831              		.file 3 "/Users/brunoflores/Downloads/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/mac
 832              		.file 4 "/Users/brunoflores/Downloads/gcc-arm-none-eabi-9-2020-q2-update/arm-none-eabi/include/sys
 833              		.file 5 "STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Include/core_cm4.h"
 834              		.file 6 "STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Device/ST/STM32F3xx/Include/system_stm32f3xx.h"
 835              		.file 7 "STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303xc.h"
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 43


 836              		.file 8 "STM32Cube_FW_F3_V1.11.1/Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 837              		.file 9 "STM32Cube_FW_F3_V1.11.1/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 838              		.file 10 "STM32Cube_FW_F3_V1.11.1/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 839              		.file 11 "STM32Cube_FW_F3_V1.11.1/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 840              		.file 12 "STM32Cube_FW_F3_V1.11.1/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rtc.h"
 841              		.file 13 "STM32Cube_FW_F3_V1.11.1/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 842              		.file 14 "STM32Cube_FW_F3_V1.11.1/Drivers/BSP/STM32F3-Discovery/stm32f3_discovery.h"
 843              		.file 15 "Inc/main.h"
 844              		.file 16 "STM32Cube_FW_F3_V1.11.1/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rtc_ex.h"
 845              		.file 17 "STM32Cube_FW_F3_V1.11.1/Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_pwr.h"
ARM GAS  /var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s 			page 44


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f3xx_lp_modes.c
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s:18     .text.SYSCLKConfig_STOP:0000000000000000 $t
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s:25     .text.SYSCLKConfig_STOP:0000000000000000 SYSCLKConfig_STOP
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s:115    .text.SleepMode_Measure:0000000000000000 $t
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s:122    .text.SleepMode_Measure:0000000000000000 SleepMode_Measure
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s:327    .text.SleepMode_Measure:0000000000000108 $d
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s:337    .text.StopRTCMode_Measure:0000000000000000 $t
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s:344    .text.StopRTCMode_Measure:0000000000000000 StopRTCMode_Measure
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s:597    .text.StopRTCMode_Measure:000000000000013c $d
                            *COM*:0000000000000020 RTCHandle
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s:609    .text.StandbyMode_Measure:0000000000000000 $t
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s:616    .text.StandbyMode_Measure:0000000000000000 StandbyMode_Measure
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s:729    .text.StandbyMode_Measure:000000000000006c $d
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s:736    .text.StandbyRTCMode_Measure:0000000000000000 $t
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s:743    .text.StandbyRTCMode_Measure:0000000000000000 StandbyRTCMode_Measure
/var/folders/5l/y8xcsg6s4873r8dg5jznx69w0000gn/T//cc8DKEnN.s:822    .text.StandbyRTCMode_Measure:0000000000000058 $d

UNDEFINED SYMBOLS
HAL_RCC_GetOscConfig
HAL_RCC_OscConfig
HAL_RCC_GetClockConfig
HAL_RCC_ClockConfig
Error_Handler
HAL_GPIO_Init
BSP_PB_Init
HAL_SuspendTick
HAL_PWR_EnterSLEEPMode
HAL_ResumeTick
BSP_LED_Init
HAL_RTC_Init
HAL_RTCEx_DeactivateWakeUpTimer
HAL_RTCEx_SetWakeUpTimer_IT
HAL_PWR_EnterSTOPMode
HAL_PWR_EnableBkUpAccess
HAL_PWR_DisableWakeUpPin
HAL_PWR_EnableWakeUpPin
HAL_Delay
HAL_PWR_EnterSTANDBYMode
